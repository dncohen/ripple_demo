#!/usr/bin/env node --harmony

// debug output
var debug = require('debug')('decommission');

// Prompt for input
var co = require('co');
var prompt = require('co-prompt');

// Read config file.
var path = require('path');
var programName = path.basename(process.argv[1]);

var fs = require('fs');
var ini = require('ini');

var conf = ini.parse(fs.readFileSync(programName + '.conf', 'utf-8'));

//console.log(conf);

// Read command line args.
var commander = require('commander');

commander
  .usage('[options] <account> [otherAccounts...]')
  .option('-a, --altnet', 'Use the altnet (' + conf['altnet']['rippled'] +') instead of live net (' + conf[programName]['rippled'] + ').')
  .option('-x, --xrp', 'Send available XRP to ' + conf[programName]['xrp-account'] + ' (live net) or ' + conf['altnet']['xrp-account'] + ' (altnet)')
  .parse(process.argv);

// Note originally the --xrp argument above took an address.  This is
// confusing when the parameter that follow are also addresses.  So
// the address must be congfigured in decommission.conf instead of
// appearing on command line.

if (commander.altnet) {
  // Override normal settings, use altnet instead.
  for (var key in conf['altnet']) {
    conf[programName][key] = conf['altnet'][key];
  }
}


if (commander.args.length == 0) {
  console.error("You must specify one or more wallets to decommission.  Use \"--help\" for usage.");
  process.exit(1);
}
else {
  console.log("Ripple wallet decommission helper, attempting to decommission " + commander.args.length + " wallets.");
}

//const util = require('util');
//const Promise = require('bluebird');
const RippleAPI = require('ripple-lib').RippleAPI;

// Values we don't know yet, but will need to keep track of:
var serverInfo = {};
var lastValidatedLedger = 0;
var maxLastLedger = 0; // Keep track of the lastLedgerSequence that we will need to wait until.
var accountSequences = {};
var accountSettings = {}; // We need to know default ripple when analyzing trust lines.

debug("Constructing RippleAPI...");
const ripple = new RippleAPI({
  server: conf[programName]['rippled']
});
debug("Constructed.  Connecting to " + conf[programName]['rippled'] + "...");

ripple.on('error', function(errorCode, errorMessage) {
  console.error("Ripple error %s: %s", errorCode, errorMessage);
});

// We subscribe to ledger events in order to know when our tx lastLedgerSequence has passed.
ripple.on('ledger', function(ledger) {
  //debug(ledger);
  lastValidatedLedger = ledger.ledgerVersion;
});

ripple.connect().then(function() {
  return ripple.getServerInfo().then(function(info) {
    debug(info);
    // Remember this info for later.
    serverInfo = info;

    console.log("Connected to %s, running version %s.", conf[programName]['rippled'], serverInfo.buildVersion);

    if (!serverInfo.validatedLedger) {
      console.error("No validated ledger found!");
      process.exit(1);
    }
  });
}).then(function() {

  // Decommission wallets in parallel.  We don't do this, because the prompts compete with one another.
  //results = commander.args.map(decommissionWallet);
  //return Promise.all(results);

  // We use this construct to yield.  That is, wait for one wallet to be decommissioned before attempting the next.
  return co(function *() {
    // Decommission each wallet
    for (var i = 0; i < commander.args.length; i++) {
      //debug(commander.args[i]);
      result = yield decommissionWallet(commander.args[i]);
    }
  });
}).then(waitForLedgers).then(function() {
  var ps = [];
  for (var i = 0; i < commander.args.length; i++) {
    p = decommissionWalletXRP(commander.args[i]);
    ps.push(p);
  }
  return Promise.all(ps);
}).then(function() {
  console.log("disconnecting...");
  ripple.disconnect();
  console.log('done.');
  process.exit();
}).catch(function(error) {
  debug(error);
  console.error(error);
  process.exit(-1);
});

function waitForLedgers() {
  if (maxLastLedger > 0 && lastValidatedLedger <= maxLastLedger) {
    console.log("Waiting for transactions to appear in validated ledger...");

    return new Promise(function (resolve, reject) {
      (function waitForIt() {
        if (maxLastLedger == 0 || lastValidatedLedger > maxLastLedger) {
          return resolve();
        }
        else {
          debug("waiting for ledger " + maxLastLedger + ", currently " + lastValidatedLedger);
          setTimeout(waitForIt, 1000);
        }
      })();
    });
  }
}

/**
 * Return as much XRP as possible from a wallet.
 * Cannot return 100%.  The minimum reserve requirement prevents 100% return.
 * Also display a confirmation that owner count has been zeroed out.
 */
function decommissionWalletXRP(address) {
  // First check that owner count is 0.  If not, we want some XRP left over to sign transactions that close our account.  So, if owner count > 0, don't return XRP.
  return ripple.getAccountInfo(address).then(function(account) {
    returnMe = null;
    console.log("After decommission, account " + address + " has " + account.xrpBalance + " XRP, and owner count is " + account.ownerCount + ".");
    if (account.ownerCount) {
      debug(account);
      console.error("Decommission of " + address + " did not eliminate owner count and XRP balance!");
    }
    else if (account.sequence != accountSequences[address]) {
      console.error("Expected sequence of " + address + " to be " + accountSequences[address] + ", but it is " + account.sequence + ".  Unable to return XRP!");
    }
    else if (Number(account.xrpBalance) > Number(serverInfo.validatedLedger.reserveBaseXRP)) { // TODO: safe to call Number() ?  Need ripple-lib-value???
      // If owner count is 0, safe to return XRP.
      if (commander.xrp) {
        xrpAddress = conf[programName]['xrp-account'];
        debug("Returning XRP to " + xrpAddress);
        payment = {
          source: {
            address: address,
            maxAmount: {
              currency: 'XRP',
              value: (Number(account.xrpBalance) - Number(serverInfo.validatedLedger.reserveBaseXRP)).toString()
            },
          },
          destination: {
            address: xrpAddress,
            amount: {
              currency: 'XRP',
              value: (Number(account.xrpBalance) - Number(serverInfo.validatedLedger.reserveBaseXRP)).toString()
            }
          }
        };

        debug(payment.source);
        returnMe = ripple.preparePayment(address, payment, getTxInstructions(address)).then(function(prepared) {
          console.log("Returning " + payment.destination.amount.value + " XRP from " + address + " to " + xrpAddress + ".");
          return decommissionWalletSignSubmit(address, prepared);
        });
      }
    }
    return returnMe;
  });

}

/**
 * Close out orders and trustlines so an account's owner count is reduced to zero.
 */
function decommissionWallet(address) {
  console.log("--------------- Decommissioning owner count " + address + " -----------------------");

  var account = {};

  return ripple.getAccountInfo(address).then(function(a) {
    account = a;
    debug(account);

    // We keep track of incremental sequence number when preparing tx.
    accountSequences[address] = account.sequence;

    // Start by getting the account info.
    return co(function *() {
      console.log("Account " + address + " has " + account.xrpBalance + " XRP, and owner count is " + account.ownerCount + ".");
      debug(account.xrpBalance);
      debug(serverInfo);
      debug(serverInfo.validatedLedger.reserveBaseXRP);
      if (account.ownerCount || (commander.xrp && Number(account.xrpBalance) > Number(serverInfo.validatedLedger.reserveBaseXRP))) {
        // If there is something to decommission, we will need the account's secret.
        // We prompt for it now, before signing preparing any tx.  If we wait until time to sign a tx, the lastLedgerSequence will pass while the secret is being entered.
        yield getSecret(address);
      }
      else {
        debug("Nothing to do for " + address);
      }
    });
  }).then(function() {
    if (account.ownerCount > 0) {
      return decommissionWalletOrders(address);
    }
  }).then(function() {
    if (account.ownerCount > 0) {
      return decommissionWalletTrustlines(address);
    }
  }).then(function() {
    console.log("--------------- End owner count " + address + " -----------------------");
    console.log(""); // blank line.
  }).catch(function(err) {
    //debug(err);
    console.error("Failed to decommission " + address + ".  " + err);
    console.log("--------------- End owner count " + address + " -----------------------");
    console.log(""); // blank line.
  });
}

function decommissionWalletOrders(address) {
  var doit = false;
  var orders = [];

  return ripple.getOrders(address).then(function (os) {
    orders = os;
    debug(orders);
    if (orders.length > 0) {
      return co(function *() {
        doit = yield prompt.confirm('Cancel ' + orders.length + ' orders? ');
      });
    }
  }).then(function() {
    var ps = [];
    if (doit) {
      for (var i = 0; i < orders.length; i++) {
        order = orders[i];
        cancel = {
          orderSequence: order.properties.sequence
        };
        p = ripple.prepareOrderCancellation(address, cancel, getTxInstructions(address)).then(function(prepared) {
          return decommissionWalletSignSubmit(address, prepared);
        });
        ps.push(p);
      }
    }
    return Promise.all(ps);
  });
}

function decommissionWalletTrustlines(address) {
  // Things we need to keep track of:
  var balances = []; // Balances to be returned.
  var trustlines = []; // Trust lines to be zeroed out.
  var settings = {}; // Account settings; we need to know default ripple in order to zero out a trust line.

  return ripple.getSettings(address).then(function(s) {
    // We need to know defaultRipple in order to zero out a trust line.
    // Note: everything getSettings returns is optional.  So it is quite normal to get an empty object!
    settings = s;
    debug("SETTINGS:");
    debug(settings);
    debug(s);
  }).then(function() {
    return ripple.getTrustlines(address).then(function(tlines) {
      for (var i = 0; i < tlines.length; i++) {
        trustline = tlines[i]['specification'];
        counterparty = tlines[i]['counterparty'];
        state = tlines[i]['state'];
        debug(tlines[i]);
        console.log("Trustline: Wallet " + address + " holds " + state['balance'] + " " + trustline['currency'] + "." + trustline['counterparty']);
        if (Number(state['balance']) > 0) {
          // A positive Balance can be returned.
          balances.push(tlines[i]);
        }

        // A non-zero trustline can be deleted.  Or if flags are set.
        // ripplingDisabled and defaultRipple are next to impossible to figure out.
        if (Number(trustline['limit']) > 0 ||
            ('authorized' in trustline) ||
            // note that !foo != !bar is foo XOR bar.
            // This was fun to figure out.
            (!('ripplingDisabled' in trustline) != ('defaultRipple' in settings)) ||
            ('qualityIn' in trustline)) {
          trustlines.push(tlines[i]);
        }
      }
    });
  }).then(function() {
    if (balances.length > 0) {
      return co(function *() {
        var doit = yield prompt.confirm('Return ' + balances.length + ' balances? ');
        if (doit) {
          for (var i = 0; i < balances.length; i++) {
            // Our "balance" is actually the data returned from getTrustlines.
            balance = balances[i];
            debug(balance);
            payment = {
              source: {
                address: address,
                maxAmount: {
                  currency: balance['specification']['currency'],
                  counterparty: balance['specification']['counterparty'],
                  value: balance['state']['balance']
                },
              },
              destination: {
                address: balance['specification']['counterparty'],
                // We can specify source amount and destination minAmount because zeroing out a trust line should be exact.
                amount: {
                  currency: balance['specification']['currency'],
                  counterparty: balance['specification']['counterparty'],
                  value: balance['state']['balance']
                }
              },
              allowPartialPayment: false
            };
            debug(payment);
            debug(payment.source);
            // Important to yield so that prepared tx get unique sequence number!
            yield ripple.preparePayment(address, payment, getTxInstructions(address)).then(function(prepared) {
              debug(prepared);
              return decommissionWalletSignSubmit(address, prepared);
            });
          }
        }
      });
    }
  }).then(function() {
    if (trustlines.length > 0) {
      return co(function *() {
        ps = [];
        var doit = yield prompt.confirm('Undo ' + trustlines.length + ' trustlines? ');
        if (doit) {
          for (var i = 0; i < trustlines.length; i++) {
            trustline = trustlines[i];
            debug("deleting...");
            debug(trustline);
            // Get the currency, counterparty.
            t = trustline['specification'];
            // Zero out the rest.
            t['limit'] = '0';

            t['ripplingDisabled'] = !('defaultRipple' in settings); // Tricksy hobbits!

            t['authorized'] = false;
            t['frozen'] = false;
            t['qualityIn'] = 1.0;
            t['qualityOut'] = 1.0;

            // Important to yield.  Otherwise all prepared tx will get the same sequence number!
            p = yield ripple.prepareTrustline(address, t, getTxInstructions(address)).then(function(prepared) {
              debug("prepared:");
              debug(prepared);
              return decommissionWalletSignSubmit(address, prepared);
              //return decommisionSignSubmitWrapper(address, prepared);
            });
            ps.push(p);
          }
        }
        return Promise.all(ps);
      });
    }
  });
}

// Provides the instructions expected by ripple-lib when preparing transactions.
// We can make our code run faster if we provide account sequence numbers.
function getTxInstructions(address) {
  var instructions = {
    sequence: accountSequences[address]
  };

  accountSequences[address] = accountSequences[address] + 1;

  return instructions;
}

var secrets = {};
function getSecret(address) {
  /*
  if (address in secrets) {
    // We already know this secret.
    return new Promise(function(resolve, reject) {
      return resolve(secrets[address]);
    });
  }
  */
  if (!(address in secrets)) {
    // Prompt for secret.
    secrets[address] = co(function *() {
      ps = [];
      var secret = yield prompt.password('Secret key for ' + address + ' : ');
      secrets[address] = secret;

      //debug(secrets); // Don't echo secrets unless you really need to.
      return secret;
    });
    // secrets[address] is a promise, until it becomes a secret!
    return secrets[address];
  }
  else {
    return Promise.resolve(secrets[address]);
  }
}

function decommissionWalletSignSubmit(address, prepared) {
  var secret = false;
  return getSecret(address).then(function(s) {
    secret = s;
  }).then(function() {
    try {
      signed = ripple.sign(prepared.txJSON, secret);

      // Later, we will wait until all transactions have immutably failed or succeeded.
      maxLastLedger = Math.max(maxLastLedger, prepared.instructions.maxLedgerVersion);

      return ripple.submit(signed.signedTransaction).then(function(result) {
        debug(prepared);
        //debug(result);
        if (result.resultCode != 'tesSUCCESS') {
          console.error(result.resultCode + ": " + result.resultMessage);
          console.error("Failed to submit " + prepared.txJSON);
        }
        else {
          debug(result.resultCode + ": " + result.resultMessage);
          console.log("Submitted transaction " + accountSequences[address] + " for " + address + ".");
        }
      });

    }
    catch (err) {
      // Difficult to recover from this.  At this point, the account's
      // sequence number will be off. Subsequent transactions will
      // fail.
      debug(prepared);
      console.error("Failed to sign transaction for " + address + ".  " + err);
    }
  });
}
